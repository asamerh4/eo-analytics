server {
    listen 443 http2 ssl;
    listen [::]:443 http2 ssl;
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    ########################################################################
    # from https://cipherli.st/                                            #
    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #
    ########################################################################

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    ##################################
    # END https://cipherli.st/ BLOCK #
    ##################################

    root /usr/share/nginx/html;

    #MESOS-STATE
    location /state.json {
        proxy_pass             http://$server_addr:5050/master/state;
        alias /mesos/;
        proxy_set_header       Host $host;
        limit_except GET {
          deny  all;
        }
    }
    location /kibana/ {
        proxy_pass             http://localhost:5601/;
        proxy_set_header Accept-Encoding "";
        proxy_set_header       Host $host;
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/htpasswd;
    }
    #ALLUXIO-UI
    location /alluxio/ {
        proxy_pass             http://localhost:19999/;
        proxy_set_header Accept-Encoding "";
        sub_filter "/memory" "/memory?offset=0&limit=20";
        sub_filter_once off;
        limit_except GET {
          deny  all;
        }
    }
    #SPARK-UI
    location /spark/ {
        proxy_pass   http://localhost:4040/;
        proxy_set_header Accept-Encoding "";
        sub_filter "<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>" "<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/><meta http-equiv=\"refresh\" content=\"30\" />";
        sub_filter "<script src=\"/static" "<script src=\"/spark/static";
        sub_filter "<link rel=\"stylesheet\" href=\"/static" "<link rel=\"stylesheet\" href=\"/spark/static";
        sub_filter "<img src=\"/static" "<img src=\"/spark/static";
        sub_filter "/jobs/" "/spark/jobs/";
        sub_filter "/stages/" "/spark/stages/";
        sub_filter "/storage/" "/spark/storage/";
        sub_filter "/executors/" "/spark/executors/";
        sub_filter_types application/javascript;
        sub_filter "location.origin" "location.origin+\"/spark\"";
        sub_filter "/environment/" "/spark/environment/";
        sub_filter "/SQL/" "/spark/SQL/";
        sub_filter_once off;
        limit_except GET {
          deny  all;
        }
    }
    #ZEPPELIN-UI
    location /zeppelin/ {
       proxy_pass   http://localhost:8080/;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header Host $http_host;
       proxy_set_header X-NginX-Proxy true;
       proxy_redirect off;
       auth_basic "Restricted";
       auth_basic_user_file /etc/nginx/htpasswd;
    }
    location /zeppelin/ws {
       proxy_pass http://localhost:8080/ws;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       auth_basic "Restricted";
       auth_basic_user_file /etc/nginx/htpasswd;
    }
    error_page 404 /404.html;
    location = /404.html {
    }
    error_page 403 /403.html;
    location = /403.html {
    }
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}
